<template>
  <div class="register_container">
    <div class="register_box">
      <div style="width: 650px">
        <p class="register_title">注册</p>
      </div>
    <el-form :model="registerForm" class="register_form" :rules="registerFormRules" label-width="0px">
      <p style="font-size: 16px">用户名</p>
      <el-form-item prop="username">
        <el-input v-model="registerForm.username" prefix-icon="iconfont icon-user"></el-input>
      </el-form-item>
      <p style="font-size: 16px">邮箱</p>
      <el-form-item prop="email">
        <el-input v-model="registerForm.email" prefix-icon="iconfont icon-youxiang"></el-input>
      </el-form-item>
      <p style="font-size: 16px">输入验证码</p>
      <el-form-item  prop="verificationCode" class="code">
          <el-input v-model="registerForm.verificationCode" prefix-icon="iconfont icon-bianji"></el-input>
          <el-button type="primary" @click="sendVerifyMail">发送验证码</el-button>
      </el-form-item>
      <p style="font-size: 16px">密码</p>
      <el-form-item prop="password">
        <el-input type="password" v-model="registerForm.password" prefix-icon="iconfont icon-mima"></el-input>
      </el-form-item>
      <p style="font-size: 16px">确认密码</p>
      <el-form-item prop="confirmPassword">
        <el-input type="password" v-model="registerForm.confirmPassword" prefix-icon="iconfont icon-mima"></el-input>
      </el-form-item>
      <el-form-item class="btn_s">
        <el-button type="primary" style="font-size: 18px" @click="register">注册</el-button>
      </el-form-item>
    </el-form>
    </div>
  </div>
</template>

<script>
export default {
  data () {
    const validatePass = (rule, value, callback) => {
      if (value === '') {
        callback(new Error('请输入密码'))
      } else {
        if (this.registerForm.confirmPassword !== '') {
          this.$refs.ruleForm.validateField('confirmPassword')
        }
        callback()
      }
    }
    const validatePass2 = (rule, value, callback) => {
      if (value === '') {
        callback(new Error('请再次输入密码'))
      } else if (value !== this.registerForm.password) {
        callback(new Error('两次输入密码不一致!'))
      } else {
        callback()
      }
    }
    return {
      registerForm: {
        username: '',
        email: '',
        password: '',
        confirmPassword: '',
        verificationCode: ''
      },
      registerFormRules: {
        username: [
          { required: true, message: '请输入用户名', trigger: 'blur' },
          { min: 6, max: 15, message: '请输入6到15个字符', trigger: 'blur' }
        ],
        password: [
          { min: 8, max: 18, message: '请输入8到18个字符', trigger: 'blur' },
          { validator: validatePass, trigger: 'blur' }
        ],
        confirmPassword: [
          { validator: validatePass2, trigger: 'blur' }
        ],
        verificationCode: [
          { required: true, message: '请输入验证码', trigger: 'blur' },
          { min: 6, max: 6, message: '请输入6位验证码', trigger: 'blur' }
        ]
      }
    }
  },
  methods: {
    sendVerifyMail () {
      this.$axios({
        methods: 'get',
        url: 'myshopping/public/sendVerifyMail',
        params: { email: this.registerForm.email }
      }).then(response => {
        if (response.status !== 200) {
          console.log(response.data.success)
          return this.$message.error('获取验证码失败！')
        } else {
          console.log(response.data.success)
        }
      })
    },
    register () {
      this.$axios({
        methods: 'get',
        url: 'myshopping/public/register',
        params: { username: this.registerForm.username, email: this.registerForm.email, password: this.registerForm.password, captcha: this.registerForm.verificationCode }
      }).then(response => {
        if (response.status !== 200) {
          return this.$message.error('注册失败！')
        } else {
          console.log(response.data.success)
          if (response.data.success === true) {
            this.routerLogin()
          }
        }
      })
    },
    routerLogin () {
      this.$router.push({
        path: '/login'
      })
    }
  }
}
</script>

<style lang="less" scoped>
  .register_container{
    background-color: #FFE1FF;
    height: 100%;
  }

  .register_box{
    width: 650px;
    height: 650px;
    background-color: #fff;
    border-radius: 3px;
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
  }
  .register_form{
    position: absolute;
    bottom: 0;
    width: 100%;
    padding: 0 20px;
    box-sizing: border-box;
  }
  .btn_s{
    display: flex;
    justify-content: center;
  }
  .code {
    .el-input {
      width: 60%;
      float: left;
      display: inline-block;
    }
    .el-button {
      width: 35%;
      float: left;
      margin-left: 5%;
      display: inline-block;
      font-size: 18px;
    }
  }
  .register_title {
    text-align: center;
    width: 100%;
    margin-top: 30px;
    font-size: 40px;
  }
</style>
